- name: Set Fleet Server Hosts
  ansible.builtin.uri:
    url: https://{{ groups['kibana'][0] }}:5601/api/fleet/settings
    method: PUT
    body_format: json
    body: >
      {
        "fleet_server_hosts": [
          {% for host in groups['fleet_server'] %}
          "https://{{ hostvars[host]['ansible_host'] }}:8220"{% if not loop.last %}, {% endif %}
          {% endfor %}
        ]
      }
    status_code:
      - 200
      - 201
      - 204
    user: elastic
    password: "{{ elasticPassword }}"
    validate_certs: false
    force_basic_auth: true
    headers:
      kbn-xsrf: true
  run_once: true

- name: Set Fleet Server Elasticsearch Output
  ansible.builtin.uri:
    url: https://{{ groups['kibana'][0] }}:5601/api/fleet/outputs/fleet-default-output
    method: PUT
    body_format: json
    body: >
      {
        "hosts": [
          {% for host in groups['elasticsearch'] %}
          "https://{{ hostvars[host]['ansible_host'] }}:9200"{% if not loop.last %}, {% endif %}
          {% endfor %}
        ]
      }
    status_code:
      - 200
      - 201
      - 204
    user: elastic
    password: "{{ elasticPassword }}"
    validate_certs: false
    force_basic_auth: true
    headers:
      kbn-xsrf: true
  run_once: true

# - name: Get CA fingerprint
#   ansible.builtin.command:
#     cmd: "openssl x509 -in certificates/{{ hostCA }} --noout -fingerprint -sha256 | cut -d = -f 2 | sed 's/://g'"
#   delegate_to: localhost
#   run_once: true
#   register: caCertFP

# - name: Set Fleet Server Elasticsearch Default Output
#   ansible.builtin.uri:
#     url: https://{{ groups['kibana'][0] }}:5601/api/fleet/settings
#     method: PUT
#     body_format: json
#     body: >
#       {
#         "fleet_server_hosts": [
#           {% for host in groups['fleet_server'] %}
#           "https://{{ hostvars[host]['ansible_host'] }}:8220"{% if not loop.last %}, {% endif %}
#           {% endfor %}
#         ]
#       }
#     status_code:
#       - 200
#       - 201
#       - 204
#     user: elastic
#     password: "{{ elasticPassword }}"
#     validate_certs: false
#     force_basic_auth: true
#     headers:
#       kbn-xsrf: true
#   run_once: true
#   delegate_to: localhost

# - name: Set Fleet Server Elasticsearch Output
#   ansible.builtin.uri:
#     url: https://{{ groups['kibana'][0] }}:5601/api/fleet/outputs/fleet-default-output
#     method: PUT
#     body_format: json
#     body: >
#       {
#         "hosts": [
#           {% for host in groups['haproxy'] %}
#           "https://{{ hostvars[host]['ansible_host'] }}:9200"{% if not loop.last %}, {% endif %}
#           {% endfor %}
#         ]
#       }
#     status_code:
#       - 200
#       - 201
#       - 204
#     user: elastic
#     password: "{{ elasticPassword }}"
#     validate_certs: false
#     force_basic_auth: true
#     headers:
#       kbn-xsrf: true
#   run_once: true
#   delegate_to: localhost

- name: Create Fleet Server Policy
  ansible.builtin.uri:
    url: https://{{ groups['kibana'][0] }}:5601/api/fleet/agent_policies?sys_monitoring=true 
    method: POST
    body_format: json
    body: >
      {
        "id": "fleet-server-policy",
        "name": "Fleet Server Policy",
        "description": "Fleet Server policy generated by Kibana",
        "namespace": "default",
        "has_fleet_server": true,
        "monitoring_enabled": [
          "logs","metrics"
          ],
        "is_default_fleet_server": true
      }
    status_code:
      - 200
      - 201
      - 204
      - 409 # Policy already exists, delete if needed and rerun
    user: elastic
    password: "{{ elasticPassword }}"
    validate_certs: false
    force_basic_auth: true
    headers:
      kbn-xsrf: true
  run_once: true

- name: Generate Enrollment Key
  ansible.builtin.uri:
    url: https://{{ groups['kibana'][0] }}:5601/api/fleet/enrollment_api_keys
    method: GET
    status_code:
      - 200
      - 201
      - 204
    user: elastic
    password: "{{ elasticPassword }}"
    validate_certs: false
    force_basic_auth: true
    headers:
      kbn-xsrf: true
  register: enrollKeys
  run_once: true
  delegate_to: localhost 

- name: Gather Fleet Service Token
  ansible.builtin.uri:
    url: https://{{ groups['kibana'][0] }}:5601/api/fleet/service_tokens
    method: POST
    status_code:
      - 200
      - 201
      - 204
    user: elastic
    password: "{{ elasticPassword }}"
    validate_certs: false
    force_basic_auth: true
    headers:
      kbn-xsrf: true
  register: fleetToken
  run_once: true
  delegate_to: localhost 

# - ansible.builtin.set_fact:
#     enrollList: "{{ enrollKeys.json.list }}"

# - ansible.builtin.set_fact:
#     fleetKey: "{{ item.api_key }}"
#   loop: "{{ enrollList }}"
#   no_log: true
#   when: "'fleet-server-policy' in item.policy_id"

- name: Check if Elastic Agent folder exists
  ansible.builtin.stat:
    path: /opt/elastic-agent-{{ esVersion }}-linux-x86_64
  register: esAgentExists

- name: Copy and unzip Agent Package to host
  ansible.builtin.unarchive:
    src: packages/elastic-agent-{{ esVersion }}-linux-x86_64.tar.gz
    dest: /opt
  become: true
  when: not esAgentExists.stat.exists

- name: Copy CA cert to trust root
  ansible.builtin.copy:
    src: certificates/{{ hostCA }}
    dest: /etc/ssl/certs/
  become: true

- name: Add firewall port
  ansible.builtin.shell: firewall-cmd --add-port 8220/tcp --permanent && firewall-cmd --reload
  become: true
  changed_when: false
  ignore_errors: true

- name: Create certs dir
  file:
    path: /opt/Elastic/Agent/certs
    state: directory
  become: true

- name: Copy Certificates to Agent Conf Dir
  copy:
    src: "certificates/{{ item.src }}"
    dest: /opt/Elastic/Agent/certs/{{ item.src }}
    group: root
    mode: 0640
  loop:
    - src: "{{ hostCert }}"
    - src: "{{ hostKey }}"
    - src: "{{ hostCA }}"
  become: true

- name: Install and enroll Elastic Agent
  ansible.builtin.shell: |
    ./elastic-agent install \
    --force \
    --url=https://{{ inventory_hostname }}:8220 \
    --fleet-server-es={{ esAPI }} \
    --fleet-server-service-token={{ fleetToken.json.value }} \
    --fleet-server-policy=fleet-server-policy \
    --certificate-authorities=/opt/Elastic/Agent/certs/{{ hostCA }} \
    --fleet-server-es-ca=/opt/Elastic/Agent/certs/{{ hostCA }} \
    --fleet-server-cert=/opt/Elastic/Agent/certs/{{ hostCert }} \
    --fleet-server-cert-key=/opt/Elastic/Agent/certs/{{ hostKey }}
  become: true
  args:
    chdir: /opt/elastic-agent-{{ esVersion }}-linux-x86_64
    creates: /opt/Elastic/Agent/elastic-agent