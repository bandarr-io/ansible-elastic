#---------------------------------------------------------------------
# Example configuration for a possible web application.  See the
# full configuration options online.
#
#   https://www.haproxy.org/download/1.8/doc/configuration.txt
#
#---------------------------------------------------------------------

#---------------------------------------------------------------------
# Global settings
#---------------------------------------------------------------------
global
    # to have these messages end up in /var/log/haproxy.log you will
    # need to:
    #
    # 1) configure syslog to accept network log events.  This is done
    #    by adding the '-r' option to the SYSLOGD_OPTIONS in
    #    /etc/sysconfig/syslog
    #
    # 2) configure local2 events to go to the /var/log/haproxy.log
    #   file. A line like the following can be added to
    #   /etc/sysconfig/syslog
    #
    #    local2.*                       /var/log/haproxy.log
    #
    log         127.0.0.1 local2

    chroot      /var/lib/haproxy
    pidfile     /var/run/haproxy.pid
    maxconn     4000
    user        haproxy
    group       haproxy
    daemon

    # turn on stats unix socket
    # stats socket /var/lib/haproxy/stats mode 660 level admin
    stats socket ipv4@0.0.0.0:9999
    stats timeout 2m

    # Only use TLSv1.2
    ssl-default-bind-options force-tlsv12

    # utilize system-wide crypto-policies
    ssl-default-bind-ciphers PROFILE=SYSTEM
    ssl-default-server-ciphers PROFILE=SYSTEM

#---------------------------------------------------------------------
# common defaults that all the 'listen' and 'backend' sections will
# use if not designated in their block
#---------------------------------------------------------------------
defaults
    mode                    http
    log                     global
    option                  httplog
    option                  dontlognull
    option http-server-close
    #option forwardfor       except 127.0.0.0/8
    option                  redispatch
    retries                 3
    timeout http-request    10s
    timeout queue           1m
    timeout connect         10s
    timeout client          1m
    timeout server          1m
    timeout http-keep-alive 10s
    timeout check           10s
    maxconn                 3000

#---------------------------------------------------------------------
# Stats frontend for monitoring
#---------------------------------------------------------------------
frontend stats
    bind *:8085
    stats enable
    stats uri /
    stats refresh 30s
    stats admin if LOCALHOST 

#---------------------------------------------------------------------
# Elasticsearch HTTPS Frontend
#---------------------------------------------------------------------
frontend elasticsearch-https-in 
    bind *:9200 ssl crt "/etc/haproxy/certs/fullchain.crt"
    option tcplog
    default_backend elasticsearch

#---------------------------------------------------------------------
# Kibana HTTPS Frontend
#---------------------------------------------------------------------
frontend kibana-https-in
    bind *:5601 ssl crt "/etc/haproxy/certs/fullchain.crt"
    option tcplog
    default_backend kibana

#---------------------------------------------------------------------
# Elasticsearch HTTPS Backend
#---------------------------------------------------------------------
backend elasticsearch
    balance leastconn
{% for item in configList.elasticsearchConfigs if "master" not in item.roles %}
{% for host in item.hosts %}
    server {{ host }} {{ hostvars[host]['ansible_host'] }}:9200 ssl verify none cookie A check inter 1s
{% endfor %}
{% endfor %}

#---------------------------------------------------------------------
# Kibana HTTPS Backend
#---------------------------------------------------------------------
backend kibana
    balance source
{% for host in groups['kibana'] %}
    server {{ host }} {{ hostvars[host]['ansible_host'] }}:5601 ssl verify none cookie A check inter 1s
{% endfor %}